sa : поменять местами a - поменять местами первые 2 элемента в верхней части стека a. Ничего
не делайте, если есть только один элемент или его нет).
sb : поменять местами b - поменять местами первые 2 элемента в верхней части стека b. Ничего
не делайте, если есть только один элемент или его нет).
ss : sa и sb одновременно.
pa : нажмите a - возьмите первый элемент в верхней части b и поместите его в верхнюю часть a.
Ничего не делайте, если b пуст.
pb: нажмите b - возьмите первый элемент в верхней части a и поместите его в верхнюю часть b.
Ничего не делайте, если a пусто.
ra : повернуть a - сдвинуть вверх все элементы стека a на 1. Первый элемент становится
последним.
rb : повернуть b - сдвинуть вверх все элементы стека b на 1. Первый элемент становится
последним.
rr : ra и rb одновременно.
rra : обратный поворот a - смещение вниз всех элементов стека a на 1. Последний элемент
становится первым.

V.3 Программа "push_swap”
• Вам нужно написать программу с именем push_swap, которая будет получать в качестве аргумента
стек a, отформатированный в виде списка целых чисел. Первый аргумент должен находиться в верхней
части стека (будьте осторожны с порядком).
• Программа должна отображать наименьший список инструкций, возможных для сортировки стека
a, наименьшее число должно быть вверху.
• Инструкции должны быть разделены символом "\n’ и ничем другим.
• Цель состоит в том, чтобы отсортировать стек с минимально возможным количеством операций.
Во время защиты мы сравним количество инструкций, найденных вашей программой, с
максимальное допустимое количество операций. Если ваша программа либо отображает
слишком большой список, либо список отсортирован неправильно, вы не получите очков.
• Если параметры не указаны, программа не должна ничего отображать и возвращать
запрос
• В случае ошибки вы должны отобразить ошибку, за которой следует "\n" в стандартной ошибке.
Ошибки включают, например: некоторые аргументы не являются целыми числами, некоторые аргументы
больше целого числа и/или имеются дубликаты.

